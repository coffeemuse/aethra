name: Commit Build
run-name: ${{ github.actor }} is doing a develop build

# Build Hercules-Aethra from the latest commit
# WRL 13 APR 2024
# WRL 23 FEB 2025 - Update to upload-artifact v4

#        arch: [armv6l, armv7l, aarch64]
#        - arch: armv6l
#          cpu: arm1176
#          base_image: raspios_lite:latest
#          cpu_info: cpuinfo/raspberrypi_zero_w
#        - arch: armv7l
#          cpu: cortex-a7
#          base_image: raspios_lite:latest
#          cpu_info: cpuinfo/raspberrypi_3b
#
#        - arch: aarch64
#          cpu: cortex-a53
#          cpu_info: cpuinfo/raspberrypi_zero2_w_arm64
#          cpu_info: cpuinfo/raspberrypi_4b
#
#        - arch: rpi5b
#          cpu: cortex-a76
#          base_image: raspios_lite_arm64:latest
#          cpu_info: cpuinfo/raspberrypi_4b
#
# raspios_lite:2022-04-04
# raspios_lite:2023-05-03
# raspios_lite:latest (armhf build, default)
# 
# raspios_lite_arm64:2022-04-04 (arm64)
# raspios_lite_arm64:2023-05-03 (arm64)
# raspios_lite_arm64:latest (arm64)

# Uploaded artifacts, for example:
# Windows
# Hercules-4.7.0.1-Aethra-DEV-g042bc23-win64.zip
# Debian X86-64
# Hercules-4.7.0.1-Aethra-DEV-g042bc23-amd64.deb
# Debian ARM64
# Hercules-4.7.0.11032-Aethra-DEV-g4f007805-aarch64.deb
#

on:
   push:
     branches:
       - main
       - develop
       - autobuild
   workflow_dispatch:

jobs:
  build-release:

    runs-on: ubuntu-latest
    needs: [build-linux]

    steps:
    - name: Check PWD
      run: |
        echo "pwd = $(pwd)"

    - uses: actions/checkout@v3.3.0
      with:
        # Number of commits to fetch. 0 indicates all history for all branches and tags.
        # Default: 1
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v2
#     with:
#       name: "release.zips"

    - name: Set Title
      run: |
        echo "Tag: latest-${{github.ref_name}}"
        if grep -q "develop" <<< "${{github.ref_name}}"; then
          TITLE="Hercules Development Snapshot"
        elif grep -q "workflow" <<< "${{github.ref_name}}"; then
          TITLE="Hercules Development Snapshot"
          TITLE="Hercules"
        elif grep -q "actions" <<< "${{github.ref_name}}"; then
          TITLE="Hercules Development Snapshot"
          TITLE="Hercules"
        fi
        echo "Title: $TITLE"
        echo "TITLE=$TITLE" >>$GITHUB_ENV
        #
        pwd
        #
        # Create Fish style release name
        VERSION=$(./_dynamic_version)
        #
        # Remove double quotes and spaces from Fish's version string
        VERSION="${VERSION%\"}"
        VERSION="${VERSION#\"}"
        VERSION="${VERSION//[[:space:]]/}"
        echo "VERSION: $VERSION"
        echo "VERSION=$VERSION" >>$GITHUB_ENV
        #
        # Artifact Names
        #LINUX_TARBALL="Hercules-$VERSION-Ubuntu-x64.tar.gz"
        #echo "LINUX_TARBALL=$LINUX_TARBALL" >>$GITHUB_ENV
        #LINUX_DEBNAME="Hercules-$VERSION.deb"
        #echo "LINUX_DEBNAME=$LINUX_DEBNAME" >>$GITHUB_ENV
        #
        # Release names are of the form:
        # Hercules-Aethra build 4.7.0.11032-Aethra-DEV-g4f007805
        #
        # Figure out the Hercules version string
        #
        HERCULES_VERSION=$(./_dynamic_version)
        #
        # Remove double quotes and spaces from Fish's version string
        #
        HERCULES_VERSION="${HERCULES_VERSION%\"}"
        HERCULES_VERSION="${HERCULES_VERSION#\"}"
        HERCULES_VERSION="${HERCULES_VERSION//[[:space:]]/}"
        echo "HERCULES_VERSION: $HERCULES_VERSION"
        echo "HERCULES_VERSION=$HERCULES_VERSION" >>$GITHUB_ENV
        #
        #------------------------------------------------------------------------------
        # Invoke shell script to dynamically define version variables
        #------------------------------------------------------------------------------
        VERS_MAJ=$(./_dynamic_version . VERS_MAJ)
        VERS_INT=$(./_dynamic_version . VERS_INT)
        VERS_MIN=$(./_dynamic_version . VERS_MIN)
        VERS_BLD=$(./_dynamic_version . VERS_BLD)
        DYNAMIC_VERSION=$(./_dynamic_version . VERSION)
        #
        echo "VERS_MAJ=$VERS_MAJ"
        echo "VERS_INT=$VERS_INT"
        echo "VERS_MIN=$VERS_MIN"
        echo "VERS_BLD=$VERS_BLD"
        echo "DYNAMIC_VERSION=$DYNAMIC_VERSION"
        #

    - name: Review binaries
      run: |
        ls -lh release.zips
        #echo "LINUX_TARBALL: ${{env.LINUX_TARBALL}}"
        #echo "LINUX_DEBNAME: ${{env.LINUX_DEBNAME}}"

    - name: Generate checksums
      uses: jmgilman/actions-generate-checksum@v1
      with:
        patterns: |
          release.zips/*.deb
          release.zips/*.zip
          release.zips/*.tar.gz
          release.zips/*.rb

    - name: Attach Release Archive
      uses: wrljet/actions/packages/automatic-releases@built-packages
      with:
        repo_token: "${{secrets.GITHUB_TOKEN}}"
        automatic_release_tag: "${{env.HERCULES_VERSION}}"
        prerelease: true
        title: "${{env.TITLE}} ${{env.VERSION}}"
        files: |
          checksum.txt
          release.zips

    - name: Update Release Notes
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        ls -lh release.zips
        echo "========================"
        gh release view "${{env.HERCULES_VERSION}}"
        #
        # The output here will look like:
        #
        # title:	Hercules 4.7.0.11205-Aethra-DEV-ga8d0680d
        # tag:	4.7.0.11205-Aethra-DEV-ga8d0680d
        # draft:	false
        # prerelease:	true
        # author:	github-actions[bot]
        # created:	2023-12-01T21:38:27Z
        # published:	2023-12-01T21:46:19Z
        # url:	https://github.com/wrljet/aethra/releases/tag/4.7.0.11205-Aethra-DEV-ga8d0680d
        # asset:	checksum.txt
        # asset:	Hercules-4.7.0.11205-Aethra-DEV-ga8d0680d-amd64.deb
        # asset:	Hercules-4.7.0.11205-Aethra-DEV-ga8d0680d-macOS.rb
        # asset:	Hercules-4.7.0.11205-Aethra-DEV-ga8d0680d-macOS.tar.gz
        # asset:	Hercules-4.7.0.11205-Aethra-DEV-ga8d0680d-win64.zip
        # --
        # ## Commits
        #
        echo "========================"
        #
        # Search for -- ## Commits and stick in our new readme info
        gh release view "${{env.HERCULES_VERSION}}" > foo
        #
        cat foo | tr '\n' '\r' | sed -e 's/.*--\r##/## Note: macOS Homebrew formula must be renamed to hercules-aethra-develop.rb\r\r##/' | tr '\r' '\n' > goo
        #
        gh release edit "${{env.HERCULES_VERSION}}" --notes-file goo

########
  build-linux:

    runs-on: ubuntu-24.04-arm

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v3.3.0
      with:
        # Number of commits to fetch. 0 indicates all history for all branches and tags.
        # Default: 1
        fetch-depth: 0

    - name: System Information
      run: |
        uname -a
        cat /etc/os-release
        echo "pwd = $(pwd)"
        SCRIPT_PATH=~/hercules-helper
        echo "SCRIPT_PATH=$SCRIPT_PATH"
        SCRIPT_DIR="$(dirname $SCRIPT_PATH)"
        echo "SCRIPT_DIR=$SCRIPT_DIR"

    - name: Get Commit Ref
      run: |
        pwd
        COMMIT_REF=$(git rev-parse --short $GITHUB_SHA)
        echo "COMMIT_REF: $COMMIT_REF"
        echo "COMMIT_REF=$COMMIT_REF" >>$GITHUB_ENV
        VERSION_NAME="4.7"
        echo "VERSION_NAME: $VERSION_NAME"
        echo "VERSION_NAME=$VERSION_NAME" >>$GITHUB_ENV
        PACKAGE_NAME="hercules-aethra-$VERSION_NAME"
        echo "PACKAGE_NAME: $PACKAGE_NAME"
        echo "PACKAGE_NAME=$PACKAGE_NAME" >>$GITHUB_ENV

    - name: Install Packages
      run: |
        sudo apt-get install git wget time ncat
        sudo apt-get install build-essential
        sudo apt-get install cmake autoconf automake flex gawk m4
        sudo apt-get install libltdl-dev libtool-bin libcap2-bin libbz2-dev zlib1g-dev
        #
        pushd ~
          pwd
          git clone https://github.com/wrljet/hercules-helper.git
          ls -l
        popd

    - name: Build Regina Rexx (used for testing)
      run: |
          which rexx && true
          export OPT_REGINA_URL="http://www.wrljet.com/ibm360/Regina-REXX-3.6.tar.gz"
          export OPT_REGINA_TARFILE="Regina-REXX-3.6.tar.gz"
          export OPT_REGINA_DIR="Regina-REXX-3.6"
          wget $OPT_REGINA_URL
          tar xfz "$OPT_REGINA_TARFILE"
          pwd
          pushd $OPT_REGINA_DIR
          ./configure --libdir=/usr/lib --enable-64bit --build=aarch64-unknown-linux-gnu
          ./config.status --config
          make
          sudo make install
          popd
          echo "Files:"
          which rexx
          find /usr/local/include -name 'rexx*.h' 2>&1

    - name: Build External Packages
      run: |
        ls

    - name: Configure
      run: |
        export TZ='America/New_York'
        mkdir build && cd build
        CFLAGS=" -frecord-gcc-switches" ../configure --enable-optimization="-g -g3 -ggdb3 -march=armv8-a -mtune=generic -O2" --enable-custom="Built with GitHub Actions" --prefix=/usr --enable-regina-rexx
        ./config.status --config

    - name: Make
      run: |
        cd build
        make clean
        make -j3

    - name: Run Tests
      run: |
        cd build
        make check

    - name: Install
      run: |
        cd build
        sudo make install
        #
        install_prefix=/usr
        sudo setcap 'cap_sys_nice=eip' $install_prefix/bin/hercules
        sudo setcap 'cap_sys_nice=eip' $install_prefix/bin/herclin
        sudo setcap 'cap_net_admin+ep' $install_prefix/bin/hercifc
        #

    - name: Try It Out
      run: |
        sudo ldconfig
        hash -r
        cd build
        /usr/bin/hercules && true

    - name: List Output
      run: |
        cd /usr/
        ls -R --format=horizontal /usr/bin
        # FIXME this takes forever
        # find -type f -exec md5sum '{}' \;

    - name: Create Release Archive
      run: |
        pwd
        #
        # Create Fish style release name
        VERSION=$(./_dynamic_version)
        #
        # Remove double quotes and spaces from Fish's version string
        echo "VERSION (original): $VERSION"
        VERSION="${VERSION%\"}"
        echo "VERSION (quotes1): $VERSION"
        VERSION="${VERSION#\"}"
        echo "VERSION (quotes2): $VERSION"
        VERSION="${VERSION//[[:space:]]/}"
        echo "VERSION (spaces): $VERSION"
        echo "VERSION=$VERSION" >>$GITHUB_ENV
        #
        # Name and create tarball
        LINUX_TARBALL="Hercules-$VERSION-Ubuntu-arm64.tar.gz"
        echo "LINUX_TARBALL=$LINUX_TARBALL" >>$GITHUB_ENV
        # FIXME skipping building this tarball
        #tar cfz $LINUX_TARBALL /usr/$PACKAGE_NAME

    - name: Prepare DPKG
      run: |
        echo "pwd = $(pwd)"
        this_dir="$(readlink -f .)"
        echo "cd = $this_dir"
        #  echo "Packager script version: $0: $(git describe --long --tags --dirty --always 2>/dev/null)"
        #  version_info="$0: $(git describe --long --tags --dirty --always)"
        #
        hercules_vers="$(./_dynamic_version . VERSION | awk '{sub("-modified","", $0); print}' | sed 's/"//g')"
        echo "Hercules package version: $hercules_vers"
        #
        SCRIPT_PATH=~/hercules-helper
        echo "SCRIPT_PATH=$SCRIPT_PATH"
        #SCRIPT_DIR="$(dirname $SCRIPT_PATH)"
        SCRIPT_DIR=~/hercules-helper
        echo "SCRIPT_DIR=$SCRIPT_DIR"
        #
        dpkg_src="$SCRIPT_DIR/packagers/debian/$PACKAGE_NAME"   # hercules-helper/packagers/debian/aethra-4.7
        echo "dpkg_src=$dpkg_src"
        #
        sudo rm -rf ./$PACKAGE_NAME
        cp -R $dpkg_src $PACKAGE_NAME/
        chmod 0555 ./$PACKAGE_NAME/DEBIAN/postinst
        sudo cp ./$PACKAGE_NAME/DEBIAN/control ./$PACKAGE_NAME/DEBIAN/control.orig
        # must 'sudo sh -c' to get the redirection to run as root
        sudo sh -c "sed 's/Version:.*$/Version: $hercules_vers/' ./$PACKAGE_NAME/DEBIAN/control.orig > ./$PACKAGE_NAME/DEBIAN/control.tmp"
        #
        sudo sh -c "sed 's/Architecture:.*$/Architecture: arm64/' ./$PACKAGE_NAME/DEBIAN/control.tmp > ./$PACKAGE_NAME/DEBIAN/control"
        #
        cat ./$PACKAGE_NAME/DEBIAN/control
        #
        echo "Copy everything locally; correct libs dir"
        #
        # Display what got built and installed
        # FIXME this takes forever
        #ls -R --format=horizontal /usr/bin
        #
        pushd $PACKAGE_NAME >/dev/null;
        sudo rm -rf usr
        sudo mkdir -p ./usr/bin
        # sudo cp -R /usr/ ./usr/
        sudo cp /usr/bin/cckd2ckd ./usr/bin
        sudo cp /usr/bin/cckd642ckd ./usr/bin
        sudo cp /usr/bin/cckdcdsk ./usr/bin
        sudo cp /usr/bin/cckdcdsk64 ./usr/bin
        sudo cp /usr/bin/cckdcomp ./usr/bin
        sudo cp /usr/bin/cckdcomp64 ./usr/bin
        sudo cp /usr/bin/cckddiag ./usr/bin
        sudo cp /usr/bin/cckddiag64 ./usr/bin
        sudo cp /usr/bin/cckdmap ./usr/bin
        sudo cp /usr/bin/cckdswap ./usr/bin
        sudo cp /usr/bin/cckdswap64 ./usr/bin
        sudo cp /usr/bin/cfba2fba ./usr/bin
        sudo cp /usr/bin/cfba642fba ./usr/bin
        sudo cp /usr/bin/ckd2cckd ./usr/bin
        sudo cp /usr/bin/ckd2cckd64 ./usr/bin
        sudo cp /usr/bin/convto64 ./usr/bin
        sudo cp /usr/bin/dasdcat ./usr/bin
        sudo cp /usr/bin/dasdconv ./usr/bin
        sudo cp /usr/bin/dasdconv64 ./usr/bin
        sudo cp /usr/bin/dasdcopy ./usr/bin
        sudo cp /usr/bin/dasdcopy64 ./usr/bin
        sudo cp /usr/bin/dasdinit ./usr/bin
        sudo cp /usr/bin/dasdinit64 ./usr/bin
        sudo cp /usr/bin/dasdisup ./usr/bin
        sudo cp /usr/bin/dasdlist ./usr/bin
        sudo cp /usr/bin/dasdload ./usr/bin
        sudo cp /usr/bin/dasdload64 ./usr/bin
        sudo cp /usr/bin/dasdls ./usr/bin
        sudo cp /usr/bin/dasdpdsu ./usr/bin
        sudo cp /usr/bin/dasdseq ./usr/bin
        sudo cp /usr/bin/dasdser ./usr/bin
        sudo cp /usr/bin/dmap2hrc ./usr/bin
        sudo cp /usr/bin/fba2cfba ./usr/bin
        sudo cp /usr/bin/fba2cfba64 ./usr/bin
        sudo cp /usr/bin/hercifc ./usr/bin
        sudo cp /usr/bin/herclin ./usr/bin
        sudo cp /usr/bin/hercules ./usr/bin
        sudo cp /usr/bin/hetget ./usr/bin
        sudo cp /usr/bin/hetinit ./usr/bin
        sudo cp /usr/bin/hetmap ./usr/bin
        sudo cp /usr/bin/hetupd ./usr/bin
        sudo cp /usr/bin/maketape ./usr/bin
        sudo cp /usr/bin/tapecopy ./usr/bin
        sudo cp /usr/bin/tapemap ./usr/bin
        sudo cp /usr/bin/tapesplt ./usr/bin
        sudo cp /usr/bin/tfprint ./usr/bin
        sudo cp /usr/bin/tfswap ./usr/bin
        sudo cp /usr/bin/txt2card ./usr/bin
        sudo cp /usr/bin/vmfplc2 ./usr/bin
        #
        sudo mkdir -p ./usr/lib/hercules
        sudo cp -R /usr/lib/hercules/* ./usr/lib/hercules
        sudo cp /usr/lib/libhdt3420_not_mod.la ./usr/lib/
        sudo cp /usr/lib/libhdt3420_not_mod.so ./usr/lib/
        sudo cp /usr/lib/libhercd.la ./usr/lib/
        sudo cp /usr/lib/libhercd.so ./usr/lib/
        sudo cp /usr/lib/libherc.la ./usr/lib/
        sudo cp /usr/lib/libhercs.la ./usr/lib/
        sudo cp /usr/lib/libherc.so ./usr/lib/
        sudo cp /usr/lib/libhercs.so ./usr/lib/
        sudo cp /usr/lib/libherct.la ./usr/lib/
        sudo cp /usr/lib/libherct.so ./usr/lib/
        sudo cp /usr/lib/libhercu.la ./usr/lib/
        sudo cp /usr/lib/libhercu.so ./usr/lib/
        #
        sudo cp -R /usr/share/hercules/ ./usr/share/
        #
        #sudo mv ./usr/lib/hercules/* ./usr/lib
        #
        #sudo mkdir -p ./usr/lib
        #
        #sudo cp /usr/lib/libh* ./usr/lib
        #sudo cp -R /usr/lib/hercules ./usr/lib/hercules
        echo
        echo "pwd = $(pwd)"
        ls
        ls -R --format=horizontal ./usr
        echo
        popd
        #
        sudo chown root:root -R ./$PACKAGE_NAME
        #
        echo "Delete the temporary 'make install' dir"
        sudo rm -rf /usr/$PACKAGE_NAME
        #
        echo "Create the Debian package"
        echo "pwd = $(pwd)"
        ls -l
        dpkg -b ./$PACKAGE_NAME
        LINUX_DEBNAME="Hercules-$VERSION-arm64.deb"
        echo "LINUX_DEBNAME=$LINUX_DEBNAME" >>$GITHUB_ENV
        mv "$PACKAGE_NAME.deb" $LINUX_DEBNAME
        ls -lh $LINUX_DEBNAME

    - name: Test install the new dpkg deb
      run: |
        echo "pwd = $(pwd)"
        echo "dpkg --install $LINUX_DEBNAME"
        sudo dpkg --install $LINUX_DEBNAME
        echo
        # FIXME -dev is in 'control' file
        echo "dpkg -L ..."
        dpkg -L "$PACKAGE_NAME-dev"
        echo
        #
        echo "hash -r and which"
        hash -r
        which hercules
        hercules --version
        #
        echo "dpkg-deb -f $LINUX_DEBNAME"
        dpkg-deb -f "$LINUX_DEBNAME"
        #
        echo "dpkg-deb -s $LINUX_DEBNAME"
        # FIXME
        dpkg -s "$PACKAGE_NAME-dev"
        #
        echo "dpkg-deb -l $PACKAGE_NAME-dev"
        # FIXME
        dpkg -l "$PACKAGE_NAME-dev"
        #

    - name: Create dpkg sha256 
      run: |
        curl -sL "$LINUX_DEBNAME" | shasum -a 256 | cut -d " " -f 1

    - name: Upload dpkg
      uses: actions/upload-artifact@v4
      with:
        path: "${{env.LINUX_DEBNAME}}"
        name: "release-debian"


### END ###
